class Node{
    int val;
    int key;
    Node prev,next;
    Node(int key, int val){
        this.key=key;
        this.val=val;
    }
}
class LRUCache {
    Node head = new Node(0,0);
    Node tail= new Node(0,0);
    Map<Integer, Node> map = new HashMap<>();
    int capacity;
    
    public LRUCache(int capacity) {
        this.capacity=capacity;
        head.next=tail;
        tail.prev=head;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node temp = map.get(key);
            removeNode(temp);
            addNode(temp);
            
            return temp.val;
        }else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            removeNode(map.get(key));
        }
        if(map.size()==capacity){
            removeNode(tail.prev);
        }
        addNode(new Node(key,value));
    }
    
    public void removeNode(Node node){
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
    
    public void addNode(Node node){
        map.put(node.key,node);
        Node headnext=head.next;
        head.next=node;
        node.prev=head;
        node.next=headnext;
        headnext.prev=node;
    }
}
