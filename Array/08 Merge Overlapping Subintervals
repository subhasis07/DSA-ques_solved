Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].


class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(a,b)->Integer.compare(a[0],b[0]));
        
       ArrayList<int[]> list= new ArrayList<>();
        
        
       int start  =  intervals[0][0];
       int end =  intervals[0][1]; 
       
       int  i =1;
       while(i<intervals.length){
           int s = intervals[i][0];
           int e = intervals[i][1];
           // next interval start is smaller than prev end and array is sorted
           // so these two internal can merge
           if( s<=end  ) { 
               // so merge both intervals 
               end =  Math.max(end,e);
           }
           else{ // if merge not possible , then insert prev interval into list
               list.add(new int[]{start,end});
               start = s;
               end =  e;                
           }
          i++;
       }
       
       list.add(new int[] {start,end});
       return list.toArray(new int[list.size()][]);
    }
}
