public class Solution {
    public static long getInversions(long arr[], int n) {
        // Write your code here.
        return mergeSort(arr,0,n-1);
    }

    public static long merge(long arr[], int low,int mid, int high){
        int right= mid+1;
        int left= low;
        long count=0;
        ArrayList<Long> list = new ArrayList<>();

        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
                list.add(arr[left]);
                left++;
            }else{
                list.add(arr[right]);
                count += (mid - left + 1);
                right++;
            }
        }

        while(left<=mid){
            list.add(arr[left]);
            left++;
        }

        while(right<=high){
            list.add(arr[right]);
            right++;
        }

        for(int i=low;i<=high;i++){
            arr[i]=list.get(i-low);
        }
        return count;
    }

    public static long mergeSort(long nums[], int low, int high){
        long count=0;
        if(low>=high){
            return count;
        }
        int mid=low+(high-low)/2;
        count+=mergeSort(nums,low,mid);
        count+=mergeSort(nums,mid+1,high);
        count+=merge(nums,low,mid,high);
        merge(nums,low,mid,high);
        return count;
    }

}
