//https://www.youtube.com/watch?v=xDEuM5qa0zg&list=PLgUwDviBIf0oSO572kQ7KCSvCUh1AdILj&index=7

class LRUCache {
    Node head= new Node(0,0);
    Node tail= new Node(0,0);
    
    Map<Integer, Node> map = new HashMap<>();
    int capacity;
    
    public LRUCache(int capacity) {
        this.capacity=capacity;
        head.next=tail;
        tail.prev=head;
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            Node node=map.get(key);
            removeNode(node);
            insertNode(node);
            
            return node.value;
        }else{
            return -1;
        }
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            removeNode(map.get(key));
        }
        if(map.size()==capacity){
            removeNode(tail.prev);
        }
        insertNode(new Node(key,value));
    }
    
    private void removeNode(Node node){
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
    
    private void insertNode(Node node){
        map.put(node.key,node);
        Node headNext= head.next;
        head.next=node;
        node.prev=head;
        headNext.prev=node;
        node.next=headNext;
    }
    
    
    class Node{
        int key, value;
        Node prev, next;
        Node(int key, int value){
            this.key=key;
            this.value=value;
        }
    }
}
