//method--1

// class Solution {
//     public int kthSmallest(TreeNode root, int k) {
//         ArrayList<Integer> res = new ArrayList<>();
//         res=inorderTraversal(root);
//         return res.get(k-1);
//     }
//     public ArrayList<Integer> inorderTraversal(TreeNode root) {
//         ArrayList<Integer> list = new ArrayList<>();
//         if(root==null){
//             return list;
//         }
//         list.addAll(inorderTraversal(root.left));
//         list.add(root.val);
//         list.addAll(inorderTraversal(root.right));
//         return list;
//     }
// }

//method-2
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> stack = new Stack<>();
        while(root!=null){
            stack.push(root);
            root=root.left;
        }
        
        while(k!=0){
            TreeNode curr=stack.pop();
            k--;
            if(k==0){
                return curr.val;
            }
            TreeNode right=curr.right;
            while(right!=null){
                stack.push(right);
                right=right.left;
            }
            
        }
        return -1;
    }
}
