public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null){
            return "";
        }
        Queue<TreeNode> queue= new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        
        queue.add(root);
        
        while(!queue.isEmpty()){
            TreeNode node= queue.poll();
            if(node==null){
                sb.append("n ");
                continue;
            }
            sb.append(node.val+" ");
            queue.add(node.left);
            queue.add(node.right);
            
        }
        return sb.toString();
    }
    
// [1 2 3 4 n 5 6]
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data==""){
            return null;
        }
        
        String res[] = data.split(" ");
        Queue<TreeNode> queue= new LinkedList<>();
        TreeNode root= new TreeNode(Integer.parseInt(res[0]));
        
        queue.add(root);
        for(int i=1;i<res.length;i++){
            TreeNode par= queue.poll();
            if(!res[i].equals("n")){
                TreeNode leftVal=new TreeNode(Integer.parseInt(res[i]));
                par.left=leftVal;
                queue.add(leftVal);
            }
            if(!res[++i].equals("n")){
                TreeNode rightVal=new TreeNode(Integer.parseInt(res[i]));
                par.right=rightVal;
                queue.add(rightVal);
            }
        }
        return root;
    }
}
