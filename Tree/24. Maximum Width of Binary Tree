/*

                            0                              // 0-0+1=1
                                
             0*2+1=1                    0*2+2=2                    // 2-1+1=2
                                
  1*2+1=3          1*2+2=4        2*2+1=5         2*2+2=6       //  6-3+1=4    

/*



class Pair{
    TreeNode node;
    int data;
    Pair(TreeNode node, int data){
        this.data=data;
        this.node=node;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(root,0));
        int maxWidth=0;
        
        while(!queue.isEmpty()){
            int size=queue.size();
            int min=queue.peek().data; 
            int first=0,last=0;
            
            for(int i=0;i<size;i++){
                TreeNode currNode= queue.peek().node;
                int currID=queue.peek().data-min;
                queue.remove();
                
                if(i==0){
                    first=currID;
                }
                if(i==size-1){
                    last=currID;
                }
                
                if(currNode.left!=null){
                    queue.add(new Pair(currNode.left, 2*currID+1));
                }
                if(currNode.right!=null){
                    queue.add(new Pair(currNode.right, 2*currID+2));
                }
            }
            maxWidth=Math.max(maxWidth,last-first+1);
        }
        
        return maxWidth;
    }
}
