class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        while(root==null){
            return list;
        }
        Deque<TreeNode> dq = new LinkedList<>();
        dq.add(root);
        boolean isReverse=false;
        
        while(!dq.isEmpty()){
            int size= dq.size();
            List<Integer> subList = new ArrayList<>();
            
            for(int i=0;i<size;i++){
                if(!isReverse){
                    TreeNode curr= dq.pollFirst();
                    subList.add(curr.val);
                    if(curr.left!=null){
                        dq.addLast(curr.left);
                    }
                    if(curr.right!=null){
                        dq.addLast(curr.right);
                    }
                    
                }else{
                    TreeNode curr= dq.pollLast();
                    subList.add(curr.val);
                    if(curr.right!=null){
                        dq.addFirst(curr.right);
                    }
                    if(curr.left!=null){
                        dq.addFirst(curr.left);
                    }     
                }
            }
            isReverse=!isReverse;
            list.add(subList);           
        }      
        return list;
    }
}



-------------------//method-----2--------------

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if (root == null)
            return list;
        Queue<TreeNode> queue= new LinkedList<>();
        queue.add(root);
        int level=0;
        
        while(!queue.isEmpty()){
            List<Integer> subList= new ArrayList<>();
            int size=queue.size();
            while(size>0){
                TreeNode currNode = queue.poll();
                if(level%2==0){
                    subList.add(currNode.val);
                }else{
                    subList.add(0,currNode.val);
                }
                if(currNode.left!=null){
                    queue.add(currNode.left);
                }
                if(currNode.right!=null){
                    queue.add(currNode.right);
                }
                size--;
                
            }
            level++;
            list.add(subList);
        }
        return list;
    }
}

